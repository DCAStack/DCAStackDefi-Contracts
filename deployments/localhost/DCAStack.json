{
  "address": "0x627b9A657eac8c3463AD17009a424dFE3FDbd0b1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dcaScheduleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingBudget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "scheduleStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextRun",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dcaOwner",
          "type": "address"
        }
      ],
      "name": "BoughtTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dcaScheduleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dcaOwner",
          "type": "address"
        }
      ],
      "name": "NewUserSchedule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        }
      ],
      "name": "calculateDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        }
      ],
      "name": "calculateExecutions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        }
      ],
      "name": "calculateGasDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "createDcaSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaScheduleId",
          "type": "uint256"
        }
      ],
      "name": "deleteSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositGas",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersGasBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsersSchedules",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "getFreeGasBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getFreeTokenBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserAllTokenBalances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserSchedules",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tradeFrequency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingBudget",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256[4]",
              "name": "scheduleDates",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "soldAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boughtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalGas",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserScheduleData.DcaSchedule[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dcaOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "scheduleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentGasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDateTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapCallData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "aggRouter1inch",
          "type": "address"
        }
      ],
      "name": "runUserDCA",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGasBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userToDcaSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingBudget",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "soldAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boughtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalGas",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tradeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "validateDcaSchedule",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x746bc20c3efa628bbef8b0138790945e236509de62dc54d86f1964841f538b10",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x627b9A657eac8c3463AD17009a424dFE3FDbd0b1",
    "transactionIndex": 0,
    "gasUsed": "3400892",
    "logsBloom": "0x
    "blockHash": "0x1c0b9eba8e047427f099f42de40ba93872f5b90a6a5d796221c4de7f6b1a34f2",
    "transactionHash": "0x746bc20c3efa628bbef8b0138790945e236509de62dc54d86f1964841f538b10",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15603377,
        "transactionHash": "0x746bc20c3efa628bbef8b0138790945e236509de62dc54d86f1964841f538b10",
        "address": "0x627b9A657eac8c3463AD17009a424dFE3FDbd0b1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1c0b9eba8e047427f099f42de40ba93872f5b90a6a5d796221c4de7f6b1a34f2"
      }
    ],
    "blockNumber": 15603377,
    "cumulativeGasUsed": "3400892",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5373bc889e06a789e0561b8fb3b75b62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dcaScheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"scheduleStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextRun\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dcaOwner\",\"type\":\"address\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dcaScheduleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dcaOwner\",\"type\":\"address\"}],\"name\":\"NewUserSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"calculateDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"calculateExecutions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"calculateGasDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currGasEstimate\",\"type\":\"uint256\"}],\"name\":\"createDcaSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaScheduleId\",\"type\":\"uint256\"}],\"name\":\"deleteSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersGasBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersSchedules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currGasEstimate\",\"type\":\"uint256\"}],\"name\":\"getFreeGasBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getFreeTokenBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserAllTokenBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSchedules\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBudget\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"scheduleDates\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGas\",\"type\":\"uint256\"}],\"internalType\":\"struct UserScheduleData.DcaSchedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dcaOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDateTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"aggRouter1inch\",\"type\":\"address\"}],\"name\":\"runUserDCA\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGasBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToDcaSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBudget\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tradeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currGasEstimate\",\"type\":\"uint256\"}],\"name\":\"validateDcaSchedule\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"admin@dcastack.com\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAStack.sol\":\"DCAStack\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/DCAStack.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./UserScheduleTrade.sol\\\";\\nimport \\\"./UserScheduleBank.sol\\\";\\nimport \\\"./UserScheduleFactory.sol\\\";\\n\\n/// @custom:security-contact admin@dcastack.com\\ncontract DCAStack is UserScheduleTrade, UserScheduleBank, UserScheduleFactory {\\n\\n}\\n\",\"keccak256\":\"0x6fde7e2ae5f3aa740c09c33e59b99f420fa21812a68344a1c87d11422c3ba302\",\"license\":\"GNU AGPLv3\"},\"contracts/UserBankData.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n//contract contains User Funds\\ncontract UserBankData is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => mapping(address => uint256)) public userTokenBalances;\\n    mapping(address => EnumerableSet.AddressSet) internal _userTokens;\\n    mapping(address => uint256) public userGasBalances;\\n    EnumerableSet.AddressSet internal _userGasAddresses;\\n\\n    function getUserTokensLength() internal view returns (uint256) {\\n        return _userTokens[msg.sender].length();\\n    }\\n\\n    function getUserTokenAddressAt(uint256 index)\\n        internal\\n        view\\n        returns (address token)\\n    {\\n        return _userTokens[msg.sender].at(index);\\n    }\\n\\n    function addUserToken(address _user, address _token) internal {\\n        if (!_userTokens[_user].contains(_token)) {\\n            _userTokens[_user].add(_token);\\n        }\\n    }\\n\\n    function addUserGasAddress(address _user) internal {\\n        _userGasAddresses.add(_user);\\n    }\\n\\n    function getAllUsersGasBalances() public view returns (uint256) {\\n        uint256 length = _userGasAddresses.length();\\n        uint256 totalGas;\\n\\n        for (uint256 i; i < length; i++) {\\n            totalGas = totalGas + userGasBalances[_userGasAddresses.at(i)];\\n        }\\n        return totalGas;\\n    }\\n\\n    function getUserGasAddressLength() internal view returns (uint256 length) {\\n        return _userGasAddresses.length();\\n    }\\n\\n    function getUserGasAddressAt(uint256 index)\\n        internal\\n        view\\n        returns (address user)\\n    {\\n        return _userGasAddresses.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0x6bf7e07921c0a841327decb05380faac618ae61723abd697edb451fd6042a5fa\",\"license\":\"GNU AGPLv3\"},\"contracts/UserScheduleBank.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./UserBankData.sol\\\";\\n\\n//contract contains User Funds\\ncontract UserScheduleBank is UserBankData, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event FundsDeposited(address indexed sender, address token, uint256 amount);\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    function depositGas() public payable {\\n        uint256 depositAmount = msg.value;\\n        userGasBalances[msg.sender] =\\n            userGasBalances[msg.sender] +\\n            depositAmount;\\n\\n        addUserGasAddress(msg.sender);\\n        emit FundsDeposited(msg.sender, ETH, depositAmount);\\n    }\\n\\n    receive() external payable {\\n        depositGas();\\n    }\\n\\n    fallback() external payable {\\n        depositGas();\\n    }\\n\\n    function withdrawGas(uint256 _tokenAmount) external nonReentrant {\\n        require(\\n            userGasBalances[msg.sender] >= _tokenAmount,\\n            \\\"Cannot withdraw more gas than deposited!\\\"\\n        );\\n        userGasBalances[msg.sender] =\\n            userGasBalances[msg.sender] -\\n            _tokenAmount;\\n\\n        (bool success, ) = msg.sender.call{value: _tokenAmount}(\\\"\\\");\\n        require(success, \\\"withdrawGas failed!\\\");\\n\\n        emit FundsWithdrawn(msg.sender, ETH, _tokenAmount);\\n    }\\n\\n    function depositFunds(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        payable\\n    {\\n        uint256 depositAmount;\\n        if (_tokenAddress == ETH) {\\n            depositAmount = msg.value;\\n        } else {\\n            IERC20 token = IERC20(_tokenAddress);\\n            uint256 preBalance = token.balanceOf(address(this));\\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n            uint256 postBalance = token.balanceOf(address(this));\\n            depositAmount = postBalance - preBalance;\\n        }\\n\\n        userTokenBalances[msg.sender][_tokenAddress] =\\n            userTokenBalances[msg.sender][_tokenAddress] +\\n            depositAmount;\\n\\n        addUserToken(msg.sender, _tokenAddress);\\n\\n        emit FundsDeposited(msg.sender, _tokenAddress, depositAmount);\\n    }\\n\\n    function withdrawFunds(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        nonReentrant\\n    {\\n        uint256 userBalance = userTokenBalances[msg.sender][_tokenAddress];\\n\\n        require(\\n            userBalance >= _tokenAmount,\\n            \\\"Cannot withdraw more than deposited!\\\"\\n        );\\n\\n        userTokenBalances[msg.sender][_tokenAddress] -= _tokenAmount;\\n\\n        if (_tokenAddress == ETH) {\\n            (bool success, ) = msg.sender.call{value: _tokenAmount}(\\\"\\\");\\n            require(success, \\\"withdrawFunds failed!\\\");\\n        } else {\\n            SafeERC20.safeTransfer(\\n                IERC20(_tokenAddress),\\n                msg.sender,\\n                _tokenAmount\\n            );\\n        }\\n\\n        emit FundsWithdrawn(msg.sender, _tokenAddress, _tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xaf284d13759b8d2023f61d2fad286fc9cb40b22b30cbe8ef16c5f55e170d2f60\",\"license\":\"GNU AGPLv3\"},\"contracts/UserScheduleData.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//create new user schedule and validate\\ncontract UserScheduleData {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct DcaSchedule {\\n        uint256 tradeFrequency;\\n        uint256 tradeAmount;\\n        uint256 remainingBudget;\\n        address buyToken;\\n        address sellToken;\\n        bool isActive;\\n        uint256[4] scheduleDates; //startDate, lastRun, nextRun, endDate\\n        uint256 soldAmount;\\n        uint256 boughtAmount;\\n        uint256 totalGas;\\n    }\\n\\n    mapping(address => DcaSchedule[]) public userToDcaSchedules;\\n    EnumerableSet.AddressSet internal _userAddresses;\\n\\n    function addUser() internal {\\n        _userAddresses.add(msg.sender);\\n    }\\n\\n    function getAllUsersSchedules()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        uint256 length = _userAddresses.length();\\n        address[] memory retrieveUsers = new address[](length);\\n        uint256[] memory totalSchedules = new uint256[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            retrieveUsers[i] = _userAddresses.at(i);\\n            totalSchedules[i] = userToDcaSchedules[retrieveUsers[i]].length;\\n        }\\n        return (retrieveUsers, totalSchedules);\\n    }\\n\\n    function removeUserFromSet() internal {\\n        if (userToDcaSchedules[msg.sender].length == 0) {\\n            _userAddresses.remove(msg.sender);\\n        }\\n    }\\n\\n    function calculateExecutions(\\n        uint256 _tradeFrequency,\\n        uint256 _startDate,\\n        uint256 _endDate\\n    ) public pure returns (uint256) {\\n        require(_endDate > _startDate, \\\"Invalid dates!\\\");\\n        require((_endDate - _startDate) >= _tradeFrequency, \\\"Invalid exec!\\\");\\n\\n        return ((_endDate - _startDate) / (_tradeFrequency));\\n    }\\n}\\n\",\"keccak256\":\"0x7593cdadc1d7598ef56e7fc4fd961d0bc4873c917ea43895c2b5afd61b627cd7\",\"license\":\"GNU AGPLv3\"},\"contracts/UserScheduleFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./UserBankData.sol\\\";\\nimport \\\"./UserScheduleData.sol\\\";\\n\\n//create new user schedule and validate\\ncontract UserScheduleFactory is UserBankData, UserScheduleData {\\n    event NewUserSchedule(\\n        uint256 indexed dcaScheduleId,\\n        address buyToken,\\n        address sellToken,\\n        address indexed dcaOwner\\n    );\\n\\n    function deleteSchedule(uint256 _dcaScheduleId) external {\\n        delete userToDcaSchedules[msg.sender][_dcaScheduleId];\\n        userToDcaSchedules[msg.sender][_dcaScheduleId] = userToDcaSchedules[\\n            msg.sender\\n        ][userToDcaSchedules[msg.sender].length - 1];\\n        userToDcaSchedules[msg.sender].pop();\\n\\n        removeUserFromSet();\\n    }\\n\\n    function getUserSchedules() public view returns (DcaSchedule[] memory) {\\n        return userToDcaSchedules[msg.sender];\\n    }\\n\\n    function getFreeGasBalance(uint256 currGasEstimate)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        DcaSchedule[] memory allUserSchedules = getUserSchedules();\\n\\n        int256 totalGasDeposit = int256(userGasBalances[msg.sender]);\\n        int256 freeGasBal;\\n\\n        if (allUserSchedules.length == 0) {\\n            freeGasBal = totalGasDeposit;\\n        } else {\\n            int256 committedGasBal;\\n\\n            for (uint256 i; i < allUserSchedules.length; i++) {\\n                if (allUserSchedules[i].isActive == true) {\\n                    uint256 remExec = calculateExecutions(\\n                        allUserSchedules[i].tradeFrequency,\\n                        allUserSchedules[i].scheduleDates[2],\\n                        allUserSchedules[i].scheduleDates[3]\\n                    );\\n\\n                    committedGasBal += int256(remExec * currGasEstimate);\\n                }\\n            }\\n\\n            freeGasBal = totalGasDeposit - committedGasBal;\\n        }\\n\\n        return freeGasBal;\\n    }\\n\\n    function getFreeTokenBalance(address _tokenAddress)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        DcaSchedule[] memory allUserSchedules = getUserSchedules();\\n\\n        int256 totalUserDeposit = int256(\\n            userTokenBalances[msg.sender][_tokenAddress]\\n        );\\n        int256 freeDepositBal = 0;\\n\\n        if (allUserSchedules.length == 0) {\\n            freeDepositBal = totalUserDeposit;\\n        } else {\\n            int256 committedBal = 0;\\n\\n            for (uint256 i; i < allUserSchedules.length; i++) {\\n                if (\\n                    allUserSchedules[i].sellToken == _tokenAddress &&\\n                    allUserSchedules[i].isActive == true\\n                ) {\\n                    committedBal += int256(allUserSchedules[i].remainingBudget);\\n                }\\n            }\\n\\n            freeDepositBal = totalUserDeposit - committedBal;\\n        }\\n\\n        return freeDepositBal;\\n    }\\n\\n    function getUserAllTokenBalances()\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            int256[] memory\\n        )\\n    {\\n        uint256 length = getUserTokensLength();\\n        address[] memory retrieveUserTokens = new address[](length);\\n        uint256[] memory retrieveUserBalances = new uint256[](length);\\n        int256[] memory retrieveFreeBalances = new int256[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            retrieveUserTokens[i] = getUserTokenAddressAt(i);\\n            retrieveUserBalances[i] = userTokenBalances[msg.sender][\\n                retrieveUserTokens[i]\\n            ];\\n            retrieveFreeBalances[i] = getFreeTokenBalance(\\n                retrieveUserTokens[i]\\n            );\\n        }\\n        return (retrieveUserTokens, retrieveUserBalances, retrieveFreeBalances);\\n    }\\n\\n    function calculateDeposit(\\n        uint256 _tradeAmount,\\n        uint256 _tradeFrequency,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        address _sellToken\\n    ) public view returns (uint256) {\\n        uint256 totalExecutions = calculateExecutions(\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate\\n        );\\n\\n        require(totalExecutions > 0, \\\"Invalid!\\\");\\n        require(_tradeAmount > 0, \\\"Not 0!\\\");\\n\\n        int256 totalBudget = int256(_tradeAmount * totalExecutions);\\n        int256 gotFreeTokenBalance = getFreeTokenBalance(_sellToken);\\n\\n        uint256 neededDeposit = 0;\\n\\n        if (totalBudget - gotFreeTokenBalance > 0) {\\n            neededDeposit = uint256(totalBudget - gotFreeTokenBalance);\\n        }\\n\\n        return neededDeposit;\\n    }\\n\\n    function calculateGasDeposit(\\n        uint256 _tradeAmount,\\n        uint256 _tradeFrequency,\\n        uint256 _startDate,\\n        uint256 _endDate\\n    ) public view returns (uint256) {\\n        uint256 totalExecutions = calculateExecutions(\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate\\n        );\\n\\n        require(totalExecutions > 0, \\\"Invalid!\\\");\\n        require(_tradeAmount > 0, \\\"Not 0!\\\");\\n\\n        int256 totalBudget = int256(_tradeAmount * totalExecutions);\\n        int256 gotFreeGasBalance = getFreeGasBalance(_tradeAmount);\\n\\n        uint256 neededDeposit = 0;\\n\\n        if (totalBudget - gotFreeGasBalance > 0) {\\n            neededDeposit = uint256(totalBudget - gotFreeGasBalance);\\n        }\\n\\n        return neededDeposit;\\n    }\\n\\n    function validateDcaSchedule(\\n        address _sellToken,\\n        uint256 _tradeAmount,\\n        uint256 _tradeFrequency,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _currGasEstimate\\n    ) public view {\\n        uint256 needAmount = calculateDeposit(\\n            _tradeAmount,\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate,\\n            _sellToken\\n        );\\n        require(needAmount == 0, \\\"Low bal!\\\");\\n\\n        uint256 needGasAmount = calculateGasDeposit(\\n            _currGasEstimate,\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate\\n        );\\n        require(needGasAmount == 0, \\\"Low gas!\\\");\\n    }\\n\\n    function createDcaSchedule(\\n        uint256 _tradeFrequency,\\n        uint256 _tradeAmount,\\n        address _buyToken,\\n        address _sellToken,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _currGasEstimate\\n    ) external {\\n        uint256 totalExec = calculateExecutions(\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate\\n        );\\n        uint256 totalBudget = _tradeAmount * totalExec;\\n\\n        validateDcaSchedule(\\n            _sellToken,\\n            _tradeAmount,\\n            _tradeFrequency,\\n            _startDate,\\n            _endDate,\\n            _currGasEstimate\\n        );\\n\\n        addUser();\\n        addUserToken(msg.sender, _buyToken);\\n\\n        userToDcaSchedules[msg.sender].push(\\n            DcaSchedule(\\n                _tradeFrequency,\\n                _tradeAmount,\\n                totalBudget,\\n                _buyToken,\\n                _sellToken,\\n                true,\\n                [_startDate, 0, _startDate, _endDate],\\n                0,\\n                0,\\n                0\\n            )\\n        );\\n\\n        emit NewUserSchedule(\\n            userToDcaSchedules[msg.sender].length - 1,\\n            _buyToken,\\n            _sellToken,\\n            msg.sender\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9190768aa93b2f9fdf2566cefaf8db9c2438e82b251b58413802dc7173a14dd8\",\"license\":\"GNU AGPLv3\"},\"contracts/UserScheduleTrade.sol\":{\"content\":\"//SPDX-License-Identifier: GNU AGPLv3\\n\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./UserBankData.sol\\\";\\nimport \\\"./UserScheduleData.sol\\\";\\n\\n//contract executes User DCA Schedules\\ncontract UserScheduleTrade is UserBankData, UserScheduleData, ReentrancyGuard {\\n    uint256 constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    event BoughtTokens(\\n        uint256 indexed dcaScheduleId,\\n        address sellToken,\\n        address buyToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount,\\n        uint256 remainingBudget,\\n        bool scheduleStatus,\\n        uint256 gasUsed,\\n        uint256 gasRemaining,\\n        uint256 nextRun,\\n        address indexed dcaOwner\\n    );\\n\\n    function updateUserDCA(\\n        address dcaOwner,\\n        uint256 scheduleId,\\n        uint256 soldAmount,\\n        uint256 boughtAmount,\\n        uint256 gasUsed,\\n        uint256 currentDateTime\\n    ) internal nonReentrant onlyOwner {\\n        uint256 startGas = gasleft();\\n\\n        userToDcaSchedules[dcaOwner][scheduleId].remainingBudget =\\n            userToDcaSchedules[dcaOwner][scheduleId].remainingBudget -\\n            soldAmount;\\n        userTokenBalances[dcaOwner][\\n            userToDcaSchedules[dcaOwner][scheduleId].sellToken\\n        ] =\\n            userTokenBalances[dcaOwner][\\n                userToDcaSchedules[dcaOwner][scheduleId].sellToken\\n            ] -\\n            soldAmount;\\n\\n        userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[\\n                1\\n            ] = userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[2];\\n\\n        if (userToDcaSchedules[dcaOwner][scheduleId].remainingBudget == 0) {\\n            userToDcaSchedules[dcaOwner][scheduleId].isActive = false;\\n        } else {\\n            uint256 numExec = calculateExecutions(\\n                userToDcaSchedules[dcaOwner][scheduleId].tradeFrequency,\\n                userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[2], //nextRun\\n                userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[3] //endDate\\n            );\\n\\n            //next run\\n            userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[2] =\\n                currentDateTime +\\n                userToDcaSchedules[dcaOwner][scheduleId].tradeFrequency;\\n\\n            //end date\\n            userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[3] =\\n                currentDateTime +\\n                (userToDcaSchedules[dcaOwner][scheduleId].tradeFrequency *\\n                    numExec);\\n        }\\n\\n        userTokenBalances[dcaOwner][\\n            userToDcaSchedules[dcaOwner][scheduleId].buyToken\\n        ] =\\n            userTokenBalances[dcaOwner][\\n                userToDcaSchedules[dcaOwner][scheduleId].buyToken\\n            ] +\\n            boughtAmount;\\n\\n        userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[\\n                1\\n            ] = currentDateTime;\\n        userToDcaSchedules[dcaOwner][scheduleId].soldAmount += soldAmount;\\n        userToDcaSchedules[dcaOwner][scheduleId].boughtAmount += boughtAmount;\\n\\n        uint256 gasCalc = (gasUsed + (startGas - gasleft())) * tx.gasprice;\\n        userGasBalances[dcaOwner] -= gasCalc;\\n        userToDcaSchedules[dcaOwner][scheduleId].totalGas += gasCalc;\\n\\n        (bool success, ) = msg.sender.call{value: gasCalc}(\\\"\\\");\\n        require(success, \\\"Gas refund failed!\\\");\\n\\n        DcaSchedule memory u = userToDcaSchedules[dcaOwner][scheduleId];\\n        uint256 remGas = userGasBalances[dcaOwner];\\n        {\\n            emit BoughtTokens(\\n                scheduleId,\\n                u.sellToken,\\n                u.buyToken,\\n                soldAmount,\\n                boughtAmount,\\n                u.remainingBudget,\\n                u.isActive,\\n                gasCalc,\\n                remGas,\\n                u.scheduleDates[2], //startDate, lastRun, nextRun, endDate\\n                dcaOwner\\n            );\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (token == IERC20(ETH));\\n    }\\n\\n    function runUserDCA(\\n        address dcaOwner,\\n        uint256 scheduleId,\\n        uint256 currentGasPrice,\\n        uint256 currentDateTime,\\n        bytes memory swapCallData,\\n        address aggRouter1inch\\n    ) external payable onlyOwner {\\n        uint256 startGas = gasleft();\\n\\n        require(userGasBalances[dcaOwner] > currentGasPrice, \\\"Low Gas!\\\");\\n\\n        require(\\n            currentDateTime >=\\n                userToDcaSchedules[dcaOwner][scheduleId].scheduleDates[2], //startDate, lastRun, nextRun, endDate\\n            \\\"Not Ready!\\\"\\n        );\\n\\n        require(\\n            userToDcaSchedules[dcaOwner][scheduleId].isActive == true,\\n            \\\"Complete!\\\"\\n        );\\n\\n        address sellTokenAddress = userToDcaSchedules[dcaOwner][scheduleId]\\n            .sellToken;\\n        uint256 sellAmount = userToDcaSchedules[dcaOwner][scheduleId]\\n            .tradeAmount;\\n        require(\\n            userTokenBalances[dcaOwner][sellTokenAddress] >= sellAmount,\\n            \\\"Low Balance!\\\"\\n        );\\n\\n        require(\\n            userToDcaSchedules[dcaOwner][scheduleId].remainingBudget > 0,\\n            \\\"Schedule complete!\\\"\\n        );\\n\\n        IERC20 sellToken = IERC20(sellTokenAddress);\\n        IERC20 buyToken = IERC20(\\n            userToDcaSchedules[dcaOwner][scheduleId].buyToken\\n        );\\n\\n        if (!isETH(sellToken)) {\\n            if (\\n                sellToken.allowance(address(this), aggRouter1inch) < sellAmount\\n            ) {\\n                sellToken.approve(aggRouter1inch, MAX_INT);\\n            }\\n        }\\n\\n        uint256 boughtAmount;\\n        if (!isETH(buyToken)) {\\n            boughtAmount = buyToken.balanceOf(address(this));\\n        } else {\\n            boughtAmount = address(this).balance;\\n        }\\n\\n        uint256 soldAmount;\\n        if (!isETH(sellToken)) {\\n            soldAmount = sellToken.balanceOf(address(this));\\n        } else {\\n            soldAmount = address(this).balance;\\n        }\\n\\n        assembly {\\n            let result := call(\\n                gas(),\\n                aggRouter1inch,\\n                callvalue(),\\n                add(swapCallData, 0x20),\\n                mload(swapCallData),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        if (!isETH(buyToken)) {\\n            boughtAmount = buyToken.balanceOf(address(this)) - boughtAmount;\\n        } else {\\n            boughtAmount = address(this).balance - boughtAmount;\\n        }\\n\\n        if (!isETH(sellToken)) {\\n            soldAmount = soldAmount - sellToken.balanceOf(address(this));\\n        } else {\\n            soldAmount = soldAmount - address(this).balance;\\n        }\\n\\n        updateUserDCA(\\n            dcaOwner,\\n            scheduleId,\\n            soldAmount,\\n            boughtAmount,\\n            startGas - gasleft(),\\n            currentDateTime\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x820d422e43a0d3f65cff6b57e3b1bec4c331ab28f84d2f2cd5dc59feab7ff445\",\"license\":\"GNU AGPLv3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000028565b600160095562000078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613bcd80620000886000396000f3fe6080604052600436106101845760003560e01c8063921b004b116100d6578063aef8d6a31161007f578063db289ce811610059578063db289ce814610460578063dcaf298814610480578063f2fde38b146104a357610193565b8063aef8d6a3146103b1578063bd0d3949146103d1578063c10753291461044057610193565b8063a185341e116100b0578063a185341e14610378578063add64c971461038d578063ae9bb6921461019357610193565b8063921b004b14610332578063996b6fa1146103455780639d21bfeb1461035857610193565b80635c576c31116101385780638da5cb5b116101125780638da5cb5b146102ca57806391018107146102f2578063916575441461031257610193565b80635c576c3114610273578063715018a614610293578063886984f1146102a857610193565b806325b217321161016957806325b21732146101db5780634269723f1461020e57806345f2d1051461023b57610193565b80630847e4831461019b5780632554cdba146101bb57610193565b36610193576101916104c3565b005b6101916104c3565b3480156101a757600080fd5b506101916101b6366004613471565b61054e565b3480156101c757600080fd5b506101916101d63660046134a6565b610809565b3480156101e757600080fd5b506101fb6101f6366004613507565b610a4f565b6040519081526020015b60405180910390f35b34801561021a57600080fd5b506101fb610229366004613550565b60036020526000908152604090205481565b34801561024757600080fd5b506101fb61025636600461356b565b600160209081526000928352604080842090915290825290205481565b34801561027f57600080fd5b506101fb61028e36600461359e565b610b20565b34801561029f57600080fd5b50610191610beb565b3480156102b457600080fd5b506102bd610bff565b60405161020591906135f3565b3480156102d657600080fd5b506000546040516001600160a01b039091168152602001610205565b3480156102fe57600080fd5b506101fb61030d3660046136b5565b610d11565b34801561031e57600080fd5b5061019161032d366004613471565b610dda565b6101916103403660046136e1565b610fd0565b610191610353366004613721565b6111c6565b34801561036457600080fd5b506101fb610373366004613550565b6119ba565b34801561038457600080fd5b506101fb611ac0565b34801561039957600080fd5b506103a2611b29565b60405161020593929190613883565b3480156103bd57600080fd5b506101fb6103cc366004613471565b611d18565b3480156103dd57600080fd5b506103f16103ec3660046136e1565b611e39565b60408051998a5260208a0198909852968801959095526001600160a01b039384166060880152929091166080860152151560a085015260c084015260e083015261010082015261012001610205565b34801561044c57600080fd5b5061019161045b3660046136e1565b611eb3565b34801561046c57600080fd5b5061019161047b3660046138ec565b6120f8565b34801561048c57600080fd5b506104956121bf565b604051610205929190613936565b3480156104af57600080fd5b506101916104be366004613550565b612322565b3360009081526003602052604090205434906104e090829061397a565b336000818152600360205260409020919091556104fc906123af565b6040805173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526020810183905233917ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b0910160405180910390a250565b33600090815260066020526040902080548290811061056f5761056f613992565b600091825260208220600c90910201818155600181018290556002810182905560038101805473ffffffffffffffffffffffffffffffffffffffff1916905560048101805474ffffffffffffffffffffffffffffffffffffffffff19169055600581018290556006810182905560078101829055600881018290559050600060098201819055600a8201819055600b909101819055338152600660205260409020805461061e906001906139a8565b8154811061062e5761062e613992565b90600052602060002090600c020160066000336001600160a01b03166001600160a01b03168152602001908152602001600020828154811061067257610672613992565b600091825260209091208254600c909202019081556001808301549082015560028083015490820155600380830154908201805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841617909155600480850180548286018054948516919095169081178555905460ff600160a01b918290041615150274ffffffffffffffffffffffffffffffffffffffffff19909316179190911790915561072c90600580840191908501906133f3565b5060098281015490820155600a8083015490820155600b91820154910155336000908152600660205260409020805480610768576107686139bf565b600082815260208120600c6000199390930192830201818155600181018290556002810182905560038101805473ffffffffffffffffffffffffffffffffffffffff1916905560048101805474ffffffffffffffffffffffffffffffffffffffffff191690556005810182905560068101829055600781018290556008810182905560098101829055600a8101829055600b015590556108066123be565b50565b6000610816888585610d11565b9050600061082482896139d5565b905061083486898b8888886120f8565b61083c6123dd565b61084633886123e8565b60066000336001600160a01b03166001600160a01b031681526020019081526020016000206040518061014001604052808b81526020018a8152602001838152602001896001600160a01b03168152602001886001600160a01b031681526020016001151581526020016040518060800160405280898152602001600081526020018981526020018881525081526020016000815260200160008152602001600081525090806001815401808255809150506001900390600052602060002090600c020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005019060046109c292919061342e565b5060e08201516009820155610100820151600a82015561012090910151600b9091015533600081815260066020526040902054610a01906001906139a8565b604080516001600160a01b03808c1682528a1660208201527f02c7cf82c34b568fd76896e8da79a4de6ce78cd85af0a1c5321205a2781ba4c1910160405180910390a3505050505050505050565b600080610a5d868686610d11565b905060008111610a9f5760405162461bcd60e51b8152602060048201526008602482015267496e76616c69642160c01b60448201526064015b60405180910390fd5b60008711610ad85760405162461bcd60e51b81526020600482015260066024820152654e6f7420302160d01b6044820152606401610a96565b6000610ae482896139d5565b90506000610af1856119ba565b9050600080610b0083856139f4565b1315610b1357610b1082846139f4565b90505b9998505050505050505050565b600080610b2e858585610d11565b905060008111610b6b5760405162461bcd60e51b8152602060048201526008602482015267496e76616c69642160c01b6044820152606401610a96565b60008611610ba45760405162461bcd60e51b81526020600482015260066024820152654e6f7420302160d01b6044820152606401610a96565b6000610bb082886139d5565b90506000610bbd88611d18565b9050600080610bcc83856139f4565b1315610bdf57610bdc82846139f4565b90505b98975050505050505050565b610bf3612435565b610bfd600061248f565b565b336000908152600660209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610d085760008481526020908190206040805161014081018252600c86029092018054835260018101549383019390935260028301548282015260038301546001600160a01b039081166060840152600480850154918216608080860191909152600160a01b90920460ff16151560a085015282519182019283905292939260c085019260058501919082845b815481526020019060010190808311610cbf575050505050815260200160098201548152602001600a8201548152602001600b8201548152505081526020019060010190610c2e565b50505050905090565b6000828211610d625760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206461746573210000000000000000000000000000000000006044820152606401610a96565b83610d6d84846139a8565b1015610dbb5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964206578656321000000000000000000000000000000000000006044820152606401610a96565b83610dc684846139a8565b610dd09190613a4c565b90505b9392505050565b60026009541415610e2d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a96565b600260095533600090815260036020526040902054811115610eb75760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f74207769746864726177206d6f726520676173207468616e20646560448201527f706f7369746564210000000000000000000000000000000000000000000000006064820152608401610a96565b33600090815260036020526040902054610ed29082906139a8565b3360008181526003602052604080822093909355915183908381818185875af1925050503d8060008114610f22576040519150601f19603f3d011682016040523d82523d6000602084013e610f27565b606091505b5050905080610f785760405162461bcd60e51b815260206004820152601360248201527f7769746864726177476173206661696c656421000000000000000000000000006044820152606401610a96565b6040805173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526020810184905233917fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a910160405180910390a250506001600955565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610ffe57503461111d565b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561104257600080fd5b505afa158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a9190613a6e565b90506110916001600160a01b0383163330876124ec565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156110d357600080fd5b505afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613a6e565b905061111782826139a8565b93505050505b3360009081526001602090815260408083206001600160a01b038716845290915290205461114c90829061397a565b3360008181526001602090815260408083206001600160a01b038916845290915290209190915561117d90846123e8565b604080516001600160a01b03851681526020810183905233917ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b0910160405180910390a2505050565b6111ce612435565b60005a6001600160a01b038816600090815260036020526040902054909150851061123b5760405162461bcd60e51b815260206004820152600860248201527f4c6f7720476173210000000000000000000000000000000000000000000000006044820152606401610a96565b6001600160a01b038716600090815260066020526040902080548790811061126557611265613992565b90600052602060002090600c020160050160026004811061128857611288613992565b01548410156112d95760405162461bcd60e51b815260206004820152600a60248201527f4e6f7420526561647921000000000000000000000000000000000000000000006044820152606401610a96565b6001600160a01b038716600090815260066020526040902080548790811061130357611303613992565b90600052602060002090600c020160040160149054906101000a900460ff16151560011515146113755760405162461bcd60e51b815260206004820152600960248201527f436f6d706c6574652100000000000000000000000000000000000000000000006044820152606401610a96565b6001600160a01b038716600090815260066020526040812080548890811061139f5761139f613992565b600091825260208083206004600c9093020191909101546001600160a01b038b81168452600690925260408320805492909116935090899081106113e5576113e5613992565b600091825260208083206001600c909302018201546001600160a01b03808e168552928252604080852093871685529290915291205490915081111561146d5760405162461bcd60e51b815260206004820152600c60248201527f4c6f772042616c616e63652100000000000000000000000000000000000000006044820152606401610a96565b6001600160a01b038916600090815260066020526040812080548a90811061149757611497613992565b90600052602060002090600c020160020154116114f65760405162461bcd60e51b815260206004820152601260248201527f5363686564756c6520636f6d706c6574652100000000000000000000000000006044820152606401610a96565b6001600160a01b03891660009081526006602052604081208054849291908b90811061152457611524613992565b600091825260209091206003600c9092020101546001600160a01b03169050611569826001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b6116ac576040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03878116602483015284919084169063dd62ed3e9060440160206040518083038186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116089190613a6e565b10156116ac576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152600019602483015283169063095ea7b390604401602060405180830381600087803b15801561167257600080fd5b505af1158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa9190613a87565b505b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614611750576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561171157600080fd5b505afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190613a6e565b9050611753565b50475b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038516146117f7576040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190613a6e565b90506117fa565b50475b6000808a5160208c01348c5af13d6000803e8080156118185761181d565b3d6000fd5b505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416146118cd576040516370a0823160e01b815230600482015282906001600160a01b038516906370a082319060240160206040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190613a6e565b6118c691906139a8565b91506118da565b6118d782476139a8565b91505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03851614611986576040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561193d57600080fd5b505afa158015611951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119759190613a6e565b61197f90826139a8565b9050611993565b61199047826139a8565b90505b6119ab8d8d83855a6119a5908d6139a8565b8f6125a3565b50505050505050505050505050565b6000806119c5610bff565b3360009081526001602090815260408083206001600160a01b03881684529091528120548251929350916119fa575080611ab8565b6000805b8451811015611aa957866001600160a01b0316858281518110611a2357611a23613992565b6020026020010151608001516001600160a01b0316148015611a665750848181518110611a5257611a52613992565b602002602001015160a00151151560011515145b15611a9757848181518110611a7d57611a7d613992565b60200260200101516040015182611a949190613aa9565b91505b80611aa181613b01565b9150506119fe565b50611ab481846139f4565b9150505b949350505050565b600080611acd6004612fa7565b90506000805b82811015611b225760036000611aea600484612fb7565b6001600160a01b03168152602081019190915260400160002054611b0e908361397a565b915080611b1a81613b01565b915050611ad3565b5092915050565b60608060606000611b38612fc3565b905060008167ffffffffffffffff811115611b5557611b5561370b565b604051908082528060200260200182016040528015611b7e578160200160208202803683370190505b50905060008267ffffffffffffffff811115611b9c57611b9c61370b565b604051908082528060200260200182016040528015611bc5578160200160208202803683370190505b50905060008367ffffffffffffffff811115611be357611be361370b565b604051908082528060200260200182016040528015611c0c578160200160208202803683370190505b50905060005b84811015611d0a57611c2381612fe0565b848281518110611c3557611c35613992565b6001600160a01b039092166020928302919091018201523360009081526001909152604081208551909190869084908110611c7257611c72613992565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110611cad57611cad613992565b602002602001018181525050611cdb848281518110611cce57611cce613992565b60200260200101516119ba565b828281518110611ced57611ced613992565b602090810291909101015280611d0281613b01565b915050611c12565b509196909550909350915050565b600080611d23610bff565b33600090815260036020526040812054825192935091611d44575080611ab8565b6000805b8451811015611aa957848181518110611d6357611d63613992565b602002602001015160a001511515600115151415611e27576000611e0d868381518110611d9257611d92613992565b602002602001015160000151878481518110611db057611db0613992565b602002602001015160c00151600260048110611dce57611dce613992565b6020020151888581518110611de557611de5613992565b602002602001015160c00151600360048110611e0357611e03613992565b6020020151610d11565b9050611e1988826139d5565b611e239084613aa9565b9250505b80611e3181613b01565b915050611d48565b60066020528160005260406000208181548110611e5557600080fd5b60009182526020909120600c90910201805460018201546002830154600384015460048501546009860154600a870154600b9097015495985093965091946001600160a01b039182169491831693600160a01b90930460ff16929189565b60026009541415611f065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a96565b60026009553360009081526001602090815260408083206001600160a01b038616845290915290205481811015611fa45760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f74207769746864726177206d6f7265207468616e206465706f736960448201527f74656421000000000000000000000000000000000000000000000000000000006064820152608401610a96565b3360009081526001602090815260408083206001600160a01b038716845290915281208054849290611fd79084906139a8565b90915550506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561209f57604051600090339084908381818185875af1925050503d8060008114612043576040519150601f19603f3d011682016040523d82523d6000602084013e612048565b606091505b50509050806120995760405162461bcd60e51b815260206004820152601560248201527f776974686472617746756e6473206661696c65642100000000000000000000006044820152606401610a96565b506120aa565b6120aa833384612ff9565b604080516001600160a01b03851681526020810184905233917fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a910160405180910390a25050600160095550565b6000612107868686868b610a4f565b905080156121575760405162461bcd60e51b815260206004820152600860248201527f4c6f772062616c210000000000000000000000000000000000000000000000006044820152606401610a96565b600061216583878787610b20565b905080156121b55760405162461bcd60e51b815260206004820152600860248201527f4c6f7720676173210000000000000000000000000000000000000000000000006044820152606401610a96565b5050505050505050565b60608060006121ce6007612fa7565b905060008167ffffffffffffffff8111156121eb576121eb61370b565b604051908082528060200260200182016040528015612214578160200160208202803683370190505b50905060008267ffffffffffffffff8111156122325761223261370b565b60405190808252806020026020018201604052801561225b578160200160208202803683370190505b50905060005b8381101561231757612274600782612fb7565b83828151811061228657612286613992565b60200260200101906001600160a01b031690816001600160a01b031681525050600660008483815181106122bc576122bc613992565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508282815181106122fa576122fa613992565b60209081029190910101528061230f81613b01565b915050612261565b509094909350915050565b61232a612435565b6001600160a01b0381166123a65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a96565b6108068161248f565b6123ba600482613042565b5050565b33600090815260066020526040902054610bfd57610806600733613057565b610806600733613042565b6001600160a01b038216600090815260026020526040902061240a908261306c565b6123ba576001600160a01b03821660009081526002602052604090206124309082613042565b505050565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a96565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261259d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261308e565b50505050565b600260095414156125f65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a96565b6002600955612603612435565b60005a6001600160a01b0388166000908152600660205260409020805491925086918890811061263557612635613992565b90600052602060002090600c02016002015461265191906139a8565b6001600160a01b038816600090815260066020526040902080548890811061267b5761267b613992565b600091825260208083206002600c9093020191909101929092556001600160a01b038916815260018252604080822060069093528120805488939291908a9081106126c8576126c8613992565b600091825260208083206004600c9093020191909101546001600160a01b0316835282019290925260400190205461270091906139a8565b6001600160a01b03881660009081526001602090815260408083206006909252822080549192918a90811061273757612737613992565b600091825260208083206004600c9093020191909101546001600160a01b039081168452838201949094526040928301822094909455918a16825260069092522080548790811061278a5761278a613992565b90600052602060002090600c02016005016002600481106127ad576127ad613992565b01546001600160a01b03881660009081526006602052604090208054889081106127d9576127d9613992565b90600052602060002090600c02016005016001600481106127fc576127fc613992565b01556001600160a01b038716600090815260066020526040902080548790811061282857612828613992565b90600052602060002090600c02016002015460001415612899576001600160a01b038716600090815260066020526040812080548890811061286c5761286c613992565b90600052602060002090600c020160040160146101000a81548160ff021916908315150217905550612aba565b6001600160a01b0387166000908152600660205260408120805461297c9190899081106128c8576128c8613992565b60009182526020808320600c909202909101546001600160a01b038c1683526006909152604090912080548a90811061290357612903613992565b90600052602060002090600c020160050160026004811061292657612926613992565b01546001600160a01b038b16600090815260066020526040902080548b90811061295257612952613992565b90600052602060002090600c020160050160036004811061297557612975613992565b0154610d11565b6001600160a01b0389166000908152600660205260409020805491925090889081106129aa576129aa613992565b90600052602060002090600c020160000154836129c7919061397a565b6001600160a01b03891660009081526006602052604090208054899081106129f1576129f1613992565b90600052602060002090600c0201600501600260048110612a1457612a14613992565b01556001600160a01b0388166000908152600660205260409020805482919089908110612a4357612a43613992565b90600052602060002090600c020160000154612a5f91906139d5565b612a69908461397a565b6001600160a01b0389166000908152600660205260409020805489908110612a9357612a93613992565b90600052602060002090600c0201600501600360048110612ab657612ab6613992565b0155505b6001600160a01b0387166000908152600160209081526040808320600690925282208054879391908a908110612af257612af2613992565b600091825260208083206003600c9093020191909101546001600160a01b03168352820192909252604001902054612b2a919061397a565b6001600160a01b03881660009081526001602090815260408083206006909252822080549192918a908110612b6157612b61613992565b600091825260208083206003600c9093020191909101546001600160a01b039081168452838201949094526040928301822094909455918a168252600690925220805483919088908110612bb757612bb7613992565b90600052602060002090600c0201600501600160048110612bda57612bda613992565b01556001600160a01b0387166000908152600660205260409020805486919088908110612c0957612c09613992565b90600052602060002090600c02016009016000828254612c29919061397a565b90915550506001600160a01b0387166000908152600660205260409020805485919088908110612c5b57612c5b613992565b90600052602060002090600c0201600a016000828254612c7b919061397a565b90915550600090503a5a612c8f90846139a8565b612c99908661397a565b612ca391906139d5565b6001600160a01b038916600090815260036020526040812080549293508392909190612cd09084906139a8565b90915550506001600160a01b0388166000908152600660205260409020805482919089908110612d0257612d02613992565b90600052602060002090600c0201600b016000828254612d22919061397a565b9091555050604051600090339083908381818185875af1925050503d8060008114612d69576040519150601f19603f3d011682016040523d82523d6000602084013e612d6e565b606091505b5050905080612dbf5760405162461bcd60e51b815260206004820152601260248201527f47617320726566756e64206661696c65642100000000000000000000000000006044820152606401610a96565b6001600160a01b038916600090815260066020526040812080548a908110612de957612de9613992565b60009182526020918290206040805161014081018252600c939093029091018054835260018101549383019390935260028301548282015260038301546001600160a01b039081166060840152600480850154918216608080860191909152600160a01b90920460ff16151560a085015282519182019283905292939260c085019260058501919082845b815481526020019060010190808311612e74575050505050815260200160098201548152602001600a8201548152602001600b8201548152505090506000600360008c6001600160a01b03166001600160a01b031681526020019081526020016000205490508a6001600160a01b03168a7f7330fde8068b0dd384e32e6f7deb7ed2599b5cbc5d856011d3f958d528ef5540846080015185606001518d8d88604001518960a001518c8a8c60c00151600260048110612f3557612f35613992565b60209081029190910151604080516001600160a01b039b8c1681529a909916918a01919091529688019590955260608701939093526080860191909152151560a085015260c084015260e08301526101008201526101200160405180910390a350506001600955505050505050505050565b6000612fb1825490565b92915050565b6000610dd38383613173565b336000908152600260205260408120612fdb90612fa7565b905090565b336000908152600260205260408120612fb19083612fb7565b6040516001600160a01b0383166024820152604481018290526124309084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612539565b6000610dd3836001600160a01b03841661319d565b6000610dd3836001600160a01b0384166131ec565b6001600160a01b03811660009081526001830160205260408120541515610dd3565b60006130e3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132df9092919063ffffffff16565b80519091501561243057808060200190518101906131019190613a87565b6124305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a96565b600082600001828154811061318a5761318a613992565b9060005260206000200154905092915050565b60008181526001830160205260408120546131e457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612fb1565b506000612fb1565b600081815260018301602052604081205480156132d55760006132106001836139a8565b8554909150600090613224906001906139a8565b905081811461328957600086600001828154811061324457613244613992565b906000526020600020015490508087600001848154811061326757613267613992565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061329a5761329a6139bf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612fb1565b6000915050612fb1565b6060610dd08484600085856001600160a01b0385163b6133415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a96565b600080866001600160a01b0316858760405161335d9190613b48565b60006040518083038185875af1925050503d806000811461339a576040519150601f19603f3d011682016040523d82523d6000602084013e61339f565b606091505b50915091506133af8282866133ba565b979650505050505050565b606083156133c9575081610dd3565b8251156133d95782518084602001fd5b8160405162461bcd60e51b8152600401610a969190613b64565b826004810192821561341e579182015b8281111561341e578254825591600101919060010190613403565b5061342a92915061345c565b5090565b826004810192821561341e579160200282015b8281111561341e578251825591602001919060010190613441565b5b8082111561342a576000815560010161345d565b60006020828403121561348357600080fd5b5035919050565b80356001600160a01b03811681146134a157600080fd5b919050565b600080600080600080600060e0888a0312156134c157600080fd5b87359650602088013595506134d86040890161348a565b94506134e66060890161348a565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600060a0868803121561351f57600080fd5b853594506020860135935060408601359250606086013591506135446080870161348a565b90509295509295909350565b60006020828403121561356257600080fd5b610dd38261348a565b6000806040838503121561357e57600080fd5b6135878361348a565b91506135956020840161348a565b90509250929050565b600080600080608085870312156135b457600080fd5b5050823594602084013594506040840135936060013592509050565b8060005b600481101561259d5781518452602093840193909101906001016135d4565b602080825282518282018190526000919060409081850190868401855b828110156136a857815180518552868101518786015285810151868601526060808201516001600160a01b03908116918701919091526080808301519091169086015260a08082015115159086015260c080820151613671828801826135d0565b505060e081015161014086015261010081015161016086015261012001516101808501526101a09093019290850190600101613610565b5091979650505050505050565b6000806000606084860312156136ca57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156136f457600080fd5b6136fd8361348a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561373a57600080fd5b6137438761348a565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff8082111561377557600080fd5b818901915089601f83011261378957600080fd5b81358181111561379b5761379b61370b565b604051601f8201601f19908116603f011681019083821181831017156137c3576137c361370b565b816040528281528c60208487010111156137dc57600080fd5b82602086016020830137600060208483010152809650505050505061380360a0880161348a565b90509295509295509295565b600081518084526020808501945080840160005b838110156138485781516001600160a01b031687529582019590820190600101613823565b509495945050505050565b600081518084526020808501945080840160005b8381101561384857815187529582019590820190600101613867565b606081526000613896606083018661380f565b6020838203818501526138a98287613853565b8481036040860152855180825282870193509082019060005b818110156138de578451835293830193918301916001016138c2565b509098975050505050505050565b60008060008060008060c0878903121561390557600080fd5b61390e8761348a565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b604081526000613949604083018561380f565b828103602084015261395b8185613853565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561398d5761398d613964565b500190565b634e487b7160e01b600052603260045260246000fd5b6000828210156139ba576139ba613964565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156139ef576139ef613964565b500290565b600080831283600160ff1b01831281151615613a1257613a12613964565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613a4657613a46613964565b50500390565b600082613a6957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613a8057600080fd5b5051919050565b600060208284031215613a9957600080fd5b81518015158114610dd357600080fd5b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615613ae357613ae3613964565b82600160ff1b038412811615613afb57613afb613964565b50500190565b6000600019821415613b1557613b15613964565b5060010190565b60005b83811015613b37578181015183820152602001613b1f565b8381111561259d5750506000910152565b60008251613b5a818460208701613b1c565b9190910192915050565b6020815260008251806020840152613b83816040850160208701613b1c565b601f01601f1916919091016040019291505056fea2646970667358221220c71645f89b460aaf3c7e7e9359fec8d7112d37c7376858b99db797d5c62400d864736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "custom:security-contact": "admin@dcastack.com",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1504,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "userTokenBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1509,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "_userTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AddressSet)1176_storage)"
      },
      {
        "astId": 1513,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "userGasBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1516,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "_userGasAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)1176_storage"
      },
      {
        "astId": 1983,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "userToDcaSchedules",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(DcaSchedule)1977_storage)dyn_storage)"
      },
      {
        "astId": 1986,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "_userAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)1176_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/DCAStack.sol:DCAStack",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(DcaSchedule)1977_storage)dyn_storage": {
        "base": "t_struct(DcaSchedule)1977_storage",
        "encoding": "dynamic_array",
        "label": "struct UserScheduleData.DcaSchedule[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(DcaSchedule)1977_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserScheduleData.DcaSchedule[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(DcaSchedule)1977_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)1176_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1176_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1176_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1175,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)875_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DcaSchedule)1977_storage": {
        "encoding": "inplace",
        "label": "struct UserScheduleData.DcaSchedule",
        "members": [
          {
            "astId": 1956,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "tradeFrequency",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1958,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "tradeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1960,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "remainingBudget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1962,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "buyToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1964,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "sellToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1966,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "isActive",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1970,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "scheduleDates",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 1972,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "soldAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1974,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "boughtAmount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1976,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "totalGas",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Set)875_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 870,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 874,
            "contract": "contracts/DCAStack.sol:DCAStack",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}